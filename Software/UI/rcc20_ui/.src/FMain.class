' Gambas class file

Private AlarmDescription As String[] = ["Volumen Tidal Alto", "Presión Inspiratoria Alta", "PEEP Insuficiente", "Volumen Tidal Bajo"]

Public Const maxPinp As Integer = 80
Public Const minPinp As Integer = 0
Public Const maxPeep As Integer = 20
Public Const minPeep As Integer = 0
Public Const maxVol As Integer = 1000
Public Const minVol As Integer = 200
Public Const maxFreq As Integer = 20
Public Const minFreq As Integer = 6
Public Const maxPorcInspir As Integer = 60
Public Const minPorcInspir As Integer = 10
Public Const maxPmax As Integer = 100
Public Const minPmax As Integer = 0
Public Const maxVolMax As Integer = 1200
Public Const minVolMax As Integer = 400
Public Const N_ALARM As Integer = 4


Public TextLX00 As Label            ' can hold the address of the object
Public TextLXmx As Label            ' can hold the address of the object

Public strtemp1 As String

Static n As Integer

Static y1Aant As Float  'Valor anterior de la gráfica 1
Static y1Bant As Float  'Valor anterior de la gráfica 2
Static y1Cant As Float  'Valor anterior de la gráfica 3
Static y1Dant As Float  'Valor anterior de la gráfica 4

Static y2Aant As Float  'Valor anterior de la gráfica 1
Static y2Bant As Float  'Valor anterior de la gráfica 2
Static y2Cant As Float  'Valor anterior de la gráfica 3
Static y2Dant As Float  'Valor anterior de la gráfica 4

Public NumPunto As Integer   'Numero de la muestra nviada a pintar

Public NomFich As String
Public Fichero As File

Public Nombre As New String[50]
Public Datos As New Variant[50, 10000]
Public NumVar As Integer     ' Número de variables en el fichero
Public NumLin As Integer     ' Número de lineas en el fichero

Public GA As Integer
Public GB As Integer
Public GC As Integer
Public GD As Integer

Public MinX As Integer
Public MaxX As Integer

Public Pr As Float
Public PrLI As Float
Public Fi As Float
Public FiMax As Float
Public Fe As Float
Public FeLI As Float
Public FeMax As Float
Public InspVol As Integer
Public InspVolMax As Integer
Public Marcha As Integer
Public ControlMode As Integer
Public TriggerMode As Integer
Public Freq As Integer
Public PorcInsp As Integer
Public Tinsp As Integer
Public PEEP As Integer
Public PIP As Integer
Public Vtidal As Integer
Public FiO2 As Integer
Public bandInsp As Integer
Public bandInspAnt As Integer
Public PipMax As Integer
Public VtMax As Integer
Public Alarma As Integer

Public PrInspMax As Float 
Public PrInspMed As Float
Public PrInspMin As Float
Public PrEspMed As Float
Public SumPrInsp As Float
Public SumPrEsp As Float
Public PrInspAnt As Float

Public NValInsp As Integer    'Número de valores adquiridos durante la inspiracion
Public NValEsp As Integer     'Número de valores adquiridos durante la espiracion

Public CompEst As Float       'Complianza estática VolTidal/PrMed
Public CompDin As Float       'Complianza dinamica VolTidal/PrMax

Public st As String              ' Cadena temporal para decodificación de la lectura de COMPort1
Public Fecha As Date


Public Sub Form_Open()
 Debug "Form OPen >> ", NomFich
  COMPort1.PortName = "/dev/ttyACM0"
  'COMPort1.PortName = "/dev/ttyS0"
  COMPort1.Speed = "115200"
  'COMPort1.Speed = "230400"
  
  COMPort1.Parity = 0
  COMPort1.DataBits = "8"
  COMPort1.StopBits = "1"
  COMPort1.FlowControl = 0
  Try
    COMPort1.Open()
  If Error Then
    Message("No Serial COMPort1 Exiting...")
    Quit
  Endif
 Debug "COMprt1 ABIERTA"
 
 NValInsp = 0
 NValEsp = 0
 SumPrInsp = 0
 PrInspAnt = 0
 
 BCPres.Enabled = False
 BStop.Enabled = False
 BTrig0.Enabled = False
 InspVolMax = 0
 'RBControlPr_Click() NO funciona para habilitar por defecto ese boton al inicio
 PintaGraf() 
 'Draw.Begin(FMain.Gr2)
End


Public Sub PintaGraf()
Dim i As Integer
  n = 0
  NumPunto = 0
  Graf1Init()
  Graf2Init()
End

Public Sub Form_Close()
  'penFich.Close()
  COMPort1.Close()
  Quit
End

Public Sub Graf1Init()
Dim colorG1 As Integer  ', colorG2, colorG3, colorG4 As Integer          ' Colores de las gráficas
Dim colorLins As Integer                                   ' Color de las lineas de division
  Gr1.Background = Color.DarkGray
  Gr1.Clear
 colorG1 = Color.Yellow
 colorLins = Color.Gray
End

Public Sub Graf2Init()
  Gr2.Background = Color.DarkGray
  Gr2.Clear
  TextLX00 = New Label(FMain)      ' Instantiates a new TextBox, i.e. creates the object
  TextLX00.Width = 60
  TextLX00.Height = 20
  TextLX00.Alignment = Align.Left
  TextLX00.Foreground = Color.DarkGray
  TextLXmx = New Label(FMain)      ' Instantiates a new TextBox, i.e. creates the object
  TextLXmx.Width = 60
  TextLXmx.Height = 20
  TextLXmx.Alignment = Align.Left
  TextLXmx.Foreground = Color.DarkGray
End

Public Sub pinta1P(TDelay As Integer, Maxy As Integer, seg As Integer, yA As Integer, yB As Integer, yC As Integer, YD As Integer)
' TDelay =            Delay del Timer que dibuja la gráfica
' Maxy =              Valor máximo del eje y
' seg =               Separación en segundos entre lineas verticales
' yA, yB, yC, yD =    Valores y de los puntos a pintar
' Las variables yAant, yBant, yCant e yDant deben definirse como variables globales Float

Dim x1, x2 As Integer
Dim colorG1 As Integer          ' Colores de las gráficas
Dim colorG2 As Integer
Dim colorLins As Integer                                   ' Color de las lineas de division
Dim FY As Float                                            ' Factor de escala del eje y
Dim FX As Integer                                          ' Factor de escala horizontal
Dim n1 As Integer                                          ' Variable para cálculos

  FY = FMain.Gr1.Height / Maxy                                    ' Factor de escala vertical
  FX = FMain.Gr1.Width / (1000 * seg / TDelay)
  colorG1 = Color.Yellow
  colorG2 = Color.Red
  colorLins = Color.Gray
  TextLXmx.text = Datos[1, MaxX]
  TextLXmx.X = FMain.Gr1.X + Gr1.Width - 30
  TextLXmx.Y = FMain.Gr1.Y + FMain.Gr1.Height
  
  n += 1
  x1 = n

  Draw.Begin(FMain.Gr1)
  Draw.Scale(FMain.Gr1.Width / (MaxX - MinX), 1)
  '************************************** PINTA LINEAS DE DIVISION ****************************
  Draw.LineWidth = 1
  Draw.Foreground = colorLins
  For n1 = 1 To 4
    Draw.Line(x1, (FMain.Gr1.Height - (MaxY * n1 * 0.2 * FY)), x1 + 10, (FMain.Gr1.Height - (Maxy * n1 * 0.2 * FY)))
  Next
  For n1 = 1 To FX
    If x1 = (1000 * seg * n1 / TDelay) - 1
      Draw.Line(1000 * seg * n1 / TDelay, 0, 1000 * seg * n1 / TDelay, FMain.Gr1.Height)
    Endif
  Next
  '****************************************** PINTA GRAFICAS ***********************************
  Draw.LineWidth = 1
  Draw.Foreground = colorG1
  'Draw.Line(x1, (FMain.Gr1.Height - (FMain.Gr1.Height / 3)), x1, (FMain.Gr1.Height - (yA * FY)))
  Draw.Line(x1 - 1, (FMain.Gr1.Height - (y1Aant * FY)), x1, (FMain.Gr1.Height - (yA * FY)))
  'Draw.Foreground = colorG2
  'Draw.Line(x1 - 1, (FMain.Gr1.Height - (y1Bant * FY)), x1, (FMain.Gr1.Height - (yB * FY)))
  Draw.End
  y1Aant = yA
  y1Bant = yB
End

Public Sub pinta2P(TDelay As Integer, Maxy As Integer, seg As Integer, yA As Integer, yB As Integer, yC As Integer, YD As Integer)
' TDelay =            Delay del Timer que dibuja la gráfica
' Maxy =              Valor máximo del eje y
' seg =               Separación en segundos entre lineas verticales
' yA, yB, yC, yD =    Valores y de los puntos a pintar
' Las variables yAant, yBant, yCant e yDant deben definirse como variables globales Float

Dim x1, x2 As Integer
Dim colorG1, colorG2, colorG3 As Integer          ' Colores de las gráficas
Dim colorLins As Integer                                   ' Color de las lineas de division
Dim FY As Float                                            ' Factor de escala del eje y
Dim FX As Integer                                          ' Factor de escala horizontal
Dim n1 As Integer                                          ' Variable para cálculos

  FY = FMain.Gr2.Height / Maxy                                    ' Factor de escala vertical
  FX = FMain.Gr2.Width / (1000 * seg / TDelay)                    ' Factor de escala horizontal
  colorG1 = Color.Green
  colorG2 = Color.Cyan
  colorG3 = Color.Red
  colorLins = Color.Gray

  TextLXmx.text = Datos[1, MaxX]
  TextLXmx.X = FMain.Gr2.X + Gr2.Width - 30
  TextLXmx.Y = FMain.Gr2.Y + FMain.Gr2.Height
  
 ' n += 1
  x1 = n

  Draw.Begin(FMain.Gr2)
  Draw.Scale(FMain.Gr2.Width / (MaxX - MinX), 1)
  '************************************** PINTA LINEAS DE DIVISION ****************************
  Draw.LineWidth = 1
  Draw.Foreground = colorLins
  For n1 = 1 To 4
    Draw.Line(x1, (FMain.Gr2.Height - (MaxY * n1 * 0.2 * FY)), x1 + 10, (FMain.Gr2.Height - (Maxy * n1 * 0.2 * FY)))
  Next
  For n1 = 1 To FX
    If x1 = (1000 * seg * n1 / TDelay) - 1
      Draw.Line(1000 * seg * n1 / TDelay, 0, 1000 * seg * n1 / TDelay, FMain.Gr2.Height)
    Endif
  Next
  '****************************************** PINTA GRAFICAS ***********************************
  Draw.LineWidth = 1
  Draw.Foreground = colorG1
  'Draw.Line(x1, (FMain.Gr2.Height - (FMain.Gr2.Height / 2)), x1, (FMain.Gr2.Height - (yA * FY)))
  Draw.Line(x1 - 1, (FMain.Gr2.Height - (y2Aant * FY)), x1, (FMain.Gr2.Height - (yA * FY)))
  Draw.Foreground = colorG2
  Draw.LineWidth = 1
  'Draw.Line(x1, (FMain.Gr2.Height - (FMain.Gr2.Height / 2)), x1, (FMain.Gr2.Height - (yB * FY)))
  Draw.Line(x1 - 1, (FMain.Gr2.Height - (y2Bant * FY)), x1, (FMain.Gr2.Height - (yB * FY)))
  'Draw.Foreground = colorG3
  'Draw.Line(x1 - 1, (FMain.Gr2.Height - (y2Cant * FY)), x1, (FMain.Gr2.Height - (yC * FY)))
  Draw.End

  y2Aant = yA
  y2Bant = yB
  y2Cant = yC
  
End


Public Sub COMPort1_Read()
                              ' La variable strtemp1 debe definirse a nivel global (cadena temporal para leer COMPort1)
Dim s As String               ' Cadena leída de la línea serie
Dim ThpH As Float               'Variable para el set del pH
Dim n1, n2 As Integer         ' Enteros para cálculos
Dim x As Integer              ' Variable para bucles
Dim Id As String
Dim Id2 As String
Dim Id3 As String
Dim SF1, SF2 As Integer

  Read #COMPort1, s, Lof(COMPort1)      'Lee los caracteres disponibles en COMPort1.Lof(COMxPort)devuelve los caracteres a leer
  strtemp1 = strtemp1 & s               'Almacena en strtemp1 los datos leídos de la línea de serie
  n1 = InStr(strtemp1, Chr$(13))        'Devuelve la posición de la línea nueva
  If n1 > 0 Then                        'Si la string tiene datos, entonces la posición de final de linea nunca será 0 (posición inicial) pero podrá
    st = Left(strtemp1, InStr(strtemp1, Chr$(13))) '& " " & Str(InStr(strtemp1, Chr$(13))) 'Devuelve strtemp1 hasta el fin de la linea
    n2 = InStr(st, Chr$(10))            'Busca la posición de retorno de carro en st (diferenciando líneas leídas por la linea serie cada vez que empieza el timer cada 50ms)
    If n2 = 1 Then st = Right(st, Len(st) - n2) 'Si el retorno de carro está al principio, coge los siguientes caracteres en una string hasta el final
    strtemp1 = Right(strtemp1, Len(strtemp1) - (n1 + 1)) 'Y de strtemp1 coge los valores empezando en caracteres(se ha asegurado) para la decodificación
  Endif
  'Esta parte del código está almacenando en st el primer s leído por la línea serie y deja en strtemp1 el resto de s almacenados
  'Debug st
  Decod(st)
End

Public Sub Decod(st As String)
  Dim num As Variant
  Dim MuestrasInsp As Integer
  Dim MaxY1 As Integer
  Dim MaxY2 As Integer
  Dim s As String
  Dim i As Integer
  'Debug "InputBuffer= "; COMPort1.InputBufferSize
  If Len(st) = 51 Then   '& (Left(st, 1) = "F"))
      Marcha = Val(Mid(st, 1, 1))
      ControlMode = Val(Mid(st, 2, 1))
      TriggerMode = Val(Mid(st, 3, 1))
      Freq = Val(Mid(st, 4, 2))
      PipMax = Val(Mid(st, 6, 2))
      VtMax = Val(Mid(st, 8, 4))
      PorcInsp = Val(Mid(st, 12, 2))
      PEEP = Val(Mid(st, 14, 2))
      PIP = Val(Mid(st, 16, 2))
      Vtidal = Val(Mid(st, 18, 4))
      Pr = CFloat(Val(Mid(st, 22, 3))) / 10.0
      Fi = CFloat(Val(Mid(st, 25, 3))) / 10.0
      Fe = CFloat(Val(Mid(st, 28, 3))) / 10.0
      InspVol = Val(Mid(st, 31, 4))
      FiO2 = Val(Mid(st, 35, 3)) 
      Tinsp = Val(Mid(st, 38, 4)) 
      bandInsp = Val(Mid(st, 42, 1))
      Alarma = Val(Mid(st, 43, 2))
      PrLI = CFloat(Val(Mid(st, 45, 3))) / 10.0
      FeLI = CFloat(Val(Mid(st, 48, 3))) / 10.0
     
      
      ' ********************************************** INICIO INSPIRACION *************************************************
      If bandInspAnt = 0 And bandInsp = 1 Then    ' ENTRAMOS EN INSPIRACION **********************************************
        bandInspAnt = bandInsp
        TBFreq.Background = Color.Green
        PrEspMed = SumPrEsp / (NValEsp - 100)         ' Calcula presión espiratoria media, Le resta 100 porque los primeros valores no se suman
        NValEsp = 0                                  ' Inicializa NValEsp
        SumPrEsp = 0                                 
        InspVolMax = 0
        FiMax = 0
      Endif
      
      '**************************************************** INSPIRACION **************************************************
      If bandInsp = 1 Then                        ' SI ESTAMOS EN INSPIRACIÓN 
        NValInsp += 1                           ' Incrementa el numero de valores en inspiración
          If NvalInsp > 50 Then SumPrInsp += Pr ' Sumatorio de los valores de presión se desprecian los primeros 50 valores
                                                ' Deberian desecharse los valores de Tinsp
          If Pr > PrInspMax Then PrInspMax = Pr ' Actualiza presión máxima
      Endif
      
      '********************************************** INICIO ESPIRACION ********************************************************
      If bandInspAnt = 1 And bandInsp = 0 Then    ' ENTRAMOS EN ESPIRACION **********************************************
        bandInspAnt = bandInsp
        PrInspMed = SumPrInsp / (NValInsp - 50)   ' Calcula presión inspiratoria media con 50 valores menos o con Tinsp
        TBPrMax.text = Format(PrInspMax, "#.#")   ' Pinta presión inspiratoria máxima
        TBFreq.Background = Color.LightGray
        SumPrInsp = 0
        NValInsp = 0
        PrInspMax = 0
        FeMax = 0
      Endif
 
      If bandInsp = 0 Then                          ' SI ESTAMOS EN ESPIRACION **********************************************
        NValEsp += 1                                ' Incrementa el número de valores en espiración
        If Nvalesp > 100 Then SumPrEsp += Pr        ' Sumatorio de los valores de presión se desprecian los primeros 100 valores
                                                    ' Deberian despreciarse los dos tercios de la espiración
      Endif
  '   TBMarcha.text = Marcha
      TBFreq.text = Freq
      TBPres.text = Format(PrInspMed, "#")
      TBPIP.text = PIP
      TBPEEP.text = PEEP
      TBVolT.text = Vtidal
      If InspVol > InspVolMax Then InspVolMax = InspVol
      TBInspVol.text = InspVolMax
      If Fi > FiMax Then FiMax = Fi
      TBFiMax.text = FiMax
      If Fe > FeMax Then FeMax = Fe
      TBFeMax.text = FeMax
      TBPrEsp.text = Format(PrEspMed, "#")
      TBInspEsp.text = PorcInsp
      If (PrInspMed - PEEP) > 0 Then CompEst = InspVolMax / (PrInspMed - PEEP)
      If (PrInspMax - PEEP) > 0 Then CompDin = InspVolMax / (PrInspMax - PEEP)
      TBCompEst.text = Format(CompEst, "#.#")
      TBCompDin.text = Format(CompDin, "#.#")
      TBTinsp.text = Tinsp
      TBHora.text = Format(Now, "dd/mm/yyyy h:n:s")
      TBPMAX.text = PipMax
      TBVMAX.text = VtMax
      s = ""
      For i = 0 To N_ALARM - 1
        If BTst(Alarma, i) Then
          s = s & AlarmDescription[i] & "\n"
        Endif
      Next
      TXAlarm.text = s
      
      'TBHora.text = Now
      
      TBFiO2.text = FiO2
      
      MaxX = 2000
      MinX = 0
      MaxY1 = 60
      Maxy2 = 200
      
      pinta1P(5, MaxY1, 10, Pr + MaxY1 / 5, PrLI + MaxY1 / 5, 0, 0)   
      pinta2P(1, MaxY2, 10, Fi + MaxY2 / 2, -(Fe) + MaxY2 / 2, -(FeLI) + MaxY2 / 2, 0) 
      'pinta1P(5, MaxY1, 10, Pr + MaxY1 / 5, 0, 0, 0)   
      'pinta2P(1, MaxY2, 10, Fi + MaxY2 / 2, -(Fe) + MaxY2 / 2, 0, 0) 
      NumPunto = NumPunto + 1
      
      If NumPunto > 2000 Then ' Antes 2500
        ' Read #COMPort1, s, Lof(COMPort1)      'Lee los caracteres disponibles en COMPort1 ¡ LIMPIA EL BUFFER DEL COMPort1 !
        'Debug st
        NumPunto = 0 
        n = 0
        Graf1Init()
        Graf2Init()
      Endif
  Endif
End

Public Sub BMarcha_Click()
  Print #COMPort1, "RSPM"      '; Chr$(13); Chr$(10);
  'BMarcha.Background = Color.Green
  BMarcha.Enabled = False
  BStop.Enabled = True
End

Public Sub BStop_Click()
  Print #COMPort1, "RSPP"       '; Chr$(13); Chr$(10);
  BMarcha.Enabled = True
  BStop.Enabled = False
End

Public Sub BVtidalMas_Click()
  If Vtidal < maxVol Then Print #COMPort1, "RSPV"; Format((Vtidal + 50), "0000")     ' NO FUNCIONA CON CRLF
End

Public Sub BVTidalMenos_Click()
  If Vtidal > minVol Then Print #COMPort1, "RSPV"; Format((Vtidal - 50), "0000")   ' NO FUNCIONA CON CRLF
End

Public Sub BPEEPmas_Click()
 If PEEP < maxPeep Then Print #COMPort1, "RSPE"; Format((PEEP * 10) + 10, "000")
End

Public Sub BPEEPmenos_Click()
  If PEEP > minPeep Then Print #COMPort1, "RSPE"; Format((PEEP * 10) - 10, "000") 
End

Public Sub BPorcInspmas_Click()
  If PorcInsp < maxPorcInspir Then Print #COMPort1, "RSPS"; Format((PorcInsp) + 10, "000") 
End

Public Sub BPorcInspmenos_Click()
  If PorcInsp > minPorcInspir Then Print #COMPort1, "RSPS"; Format((PorcInsp) - 10, "000") 
End

Public Sub BPrMas_Click()
   If PIP < maxPinp Then Print #COMPort1, "RSPG"; Format((PIP) + 1, "000") 
End

Public Sub BPrMenos_Click()
   If PIP > minPinp Then Print #COMPort1, "RSPG"; Format((PIP) - 1, "000") 
End

Public Sub BSalir_Click()
 Quit
End

Public Sub BFreqMas_Click()
  If Freq < maxFreq Then Print #COMPort1, "RSPF"; Format(Freq + 1, "000")
End

Public Sub BFreqMenos_Click()
    If Freq > minFreq Then Print #COMPort1, "RSPF"; Format(Freq - 1, "000")
End

Public Sub BCPres_Click()
  Print #COMPort1, "RSPL000"      '; Chr$(13); Chr$(10);
  BCPres.Enabled = False
  BCFlow.Enabled = True
End


Public Sub BCFlow_Click()
  Print #COMPort1, "RSPL001"      '; Chr$(13); Chr$(10);
  BCPres.Enabled = True
  BCFlow.Enabled = False
End

Public Sub BTrig0_Click()
  Print #COMPort1, "RSPA000"      '; Chr$(13); Chr$(10);
  BTrig0.Enabled = False
  BTrig1.Enabled = True
  BTrig2.Enabled = True
End

Public Sub BTrig1_Click()
  Print #COMPort1, "RSPA001"      '; Chr$(13); Chr$(10);
  BTrig0.Enabled = True
  BTrig1.Enabled = False
  BTrig2.Enabled = True
End

Public Sub BTrig2_Click()
  Print #COMPort1, "RSPA002"      '; Chr$(13); Chr$(10);
  BTrig0.Enabled = True
  BTrig1.Enabled = True
  BTrig2.Enabled = False
End

Public Sub BtinspMas_Click()
   Print #COMPort1, "RSPT"; Format((Tinsp + 50), "0000")   
End

Public Sub BtinspMenos_Click()
  Print #COMPort1, "RSPT"; Format((Tinsp - 50), "0000")   
End


Public Sub BPmaxMenos_Click()
  If PipMax > minPmax Then Print #COMPort1, "RSPB"; Format((PipMax - 5), "000")
End
Public Sub BPmaxMas_Click()
  If PipMax < maxPmax Then Print #COMPort1, "RSPB"; Format((PipMax + 5), "000")
End

Public Sub BVolMenos_Click()
  If VtMax > minVolMax Then Print #COMPort1, "RSPD"; Format((VtMax - 10), "0000")
End

Public Sub BVolMas_Click()
  If VtMax < maxVolMax Then Print #COMPort1, "RSPD"; Format((VtMax + 10), "0000")
End

Public Sub BResetAlarm_Click()
  Print #COMPort1, "RSPX"
End

Public Sub BCalib_Click()
  FCalibracion.ShowModal
End
